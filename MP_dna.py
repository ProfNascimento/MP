# -*- coding: utf-8 -*-
"""MP_DNA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qUH2BkfWUtETVBmE5HuvzoSlWRHsMq2i
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline


gene_df_train=pd.read_csv('https://raw.githubusercontent.com/ProfNascimento/MP/main/data_set_ALL_AML_train.csv')

gene_df_train.head()
print(gene_df_train.shape)

gene_df_train.drop([col for col in gene_df_train.columns if 'call' in col],1, inplace=True)
gene_df_train.drop(['Gene Description','Gene Accession Number'],axis=1,inplace=True)
gene_df_train.head()

gene_df_train.shape

sns.heatmap(gene_df_train.corr(), annot=False, cmap='Blues')

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_X = scaler.fit_transform(gene_df_train)

## PCA TRANSFORMATION
from sklearn.decomposition import PCA

model = PCA(n_components=2)

principal_components = model.fit_transform(scaled_X)

plt.figure(figsize=(8,6))
plt.scatter(principal_components[:,0],principal_components[:,1])
plt.xlabel('First principal component')
plt.ylabel('Second Principal Component')

## DISSIMILARITY MATRIX CALCULATION
from sklearn.metrics.pairwise import euclidean_distances
dist = euclidean_distances(scaled_X)

## MDS TRANSFORM
from sklearn.manifold import MDS

mds = MDS(dissimilarity='precomputed', n_components=2, random_state=0)
# Get the embeddings
MDS_transform = mds.fit_transform(dist)

plt.figure(figsize=(8,6))
plt.scatter(MDS_transform[:,0], MDS_transform[:,1])

## ForceScheme TRANSFORM
import mppy
matrix_2d = mppy.force_2d(dist)
plt.figure(figsize=(8,6))
plt.scatter(matrix_2d[:,0],matrix_2d[:,1])

## LAMP TRANSFORM
import mppy
LAMP = mppy.lamp_2d(dist)
plt.figure(figsize=(8,6))
plt.scatter(LAMP[:,0],LAMP[:,1])

## T-SNE TRANSFORM
from sklearn.manifold import TSNE

tsne = TSNE(n_components=2, random_state=0)
projections = tsne.fit_transform(dist)

plt.figure(figsize=(8,6))
plt.scatter(projections[:,0],projections[:,1])
plt.xlabel('First tSNE component')
plt.ylabel('Second tSNE Component')

## UMAP TRANSFORM
from umap import UMAP

umap_2d = UMAP(n_components=2, init='random', random_state=0)
proj_2d = umap_2d.fit_transform(dist)

plt.figure(figsize=(8,6))
plt.scatter(proj_2d[:,0],proj_2d[:,1])
plt.xlabel('First UMAP component')
plt.ylabel('Second UMAP Component')
